package TestMe::Tests::Tests;

use strict;

use DBI;
use Data::Dumper;

use ErrorHandle::Error::Compact;

sub getTests($)
{
    my ($app) = @_;

    my $params = $$app{cgi};
    #TODO Assert User Session
    my $all_difficulties = 1;
    my $all_topics = 1;

    if($$params{difficulty})
    {
        $all_difficulties = 0;
    }

    if($$params{topic})
    {
        $all_topics = 0;
    }

    my $sth = $$app{dbh}->prepare(
        q{
            SELECT *
            FROM tests_vw
            WHERE (difficulty_id = ? OR ?)
            AND (topic_id = ? OR ?)
        }
    );
    $sth->execute($$params{difficulty}, $all_difficulties, $$params{topic}, $all_topics);

    my $result = {};
    
    my @arr;
    while(my $row = $sth->fetchrow_hashref)
    {
        push @arr, $row;
    }
    $$result{tests} = \@arr;
    TRACE("RESULT", Dumper $result);
    return $result;
}

sub beginTest($)
{
    my ($app) = @_;
    
    my $params = $$app{cgi};
    #TODO Assert user Session
    ASSERT_PEER($$params{random_test} || $$params{test_id}, "Missing Param");

    my $test_row;
    my $sth;
    if($$params{random_test} && !$$params{test_id})#Random Test
    {
        $sth = $$app{dbh}->prepare("
            SELECT * FROM available_tests_vw OFFSET random() * (select count(*) - 1 from available_tests_vw) LIMIT 1"
        );
        $sth->execute();   
    }
    else
    {
        $sth = $$app{dbh}->prepare("
            SELECT * FROM tests WHERE id = ?
        ");
        $sth->execute($$params{test_id});
    }
    ASSERT($sth->rows == 1, "No rows selected from tests");
    $test_row = $sth->fetchrow_hashref;
    
    my $expires_at = "NULL";
    if($$test_row{is_timed})
    {
        $expires_at = " now() + " . $$app{dbh}->quote($$test_row{time_minutes} . " minutes") . "::interval "; 
    }

    my @questions;
    
    my $sth = $$app{dbh}->prepare("
        SELECT * FROM questions where test_id = ?
    ");
    $sth->execute($$test_row{id});
    ASSERT_USER($sth->rows > 0, "The selected test has 0 questions");#TODO add err code
    
    while(my $row = $sth->fetchrow_hashref)
    {
        push @questions, $$row{id};
    }

    #TODO question order may be shuflled
    $sth = $$app{dbh}->prepare("
        SELECT * 
        FROM accounts
        WHERE account_id = ? 
        ");
    $sth->execute($$params{account_id});
    ASSERT($sth->rows == 1, "no rows selected from accounts");
    my $account_row = $sth->fetchrow_hashref;

    $sth = $$app{dbh}->prepare("
        INSERT INTO test_sessions
        VALUES(default, ?, ?, ?, default, ?, $expires_at, default, default) 
        RETURNING *
    ");
    $sth->execute(\@questions, $$test_row{id}, $$account_row{id}, undef);
    ASSERT($sth->rows == 1, "Insert into test_sessions failed");
    my $test_session_row = $sth->fetchrow_hashref;

    my $result = {
        test_session_token => $$test_session_row{session_token}
    };
    TRACE("Tests::Tests::beginTest::result", Dumper $result);
    return $result;
}

sub getQuestion($)
{
    my ($app) = @_;
#TODO Assert Account session
    my $params = $$app{cgi};

    ASSERT_PEER(defined $$params{account_id} && defined $$params{session_token} && $$params{test_session_token}, "Missing Param");

    if(!defined $$params{question_number})
    {
        $$params{question_number} = 0;
    }

    my $sth = $$app{dbh}->prepare("
        SELECT *
        FROM test_sessions
        WHERE session_token = ?
    ");
    $sth->execute($$params{test_session_token});
    ASSERT($sth->rows == 1, "Incorrect session token");
    my $test_session_row = $sth->fetchrow_hashref;

    ASSERT_USER(scalar @{$$test_session_row{questions_id}} > $$params{question_number}, "Test Has finished", "TESTFINISHED");
    $sth = $$app{dbh}->prepare("SELECT * FROM questions where id = ?");
    $sth->execute($$test_session_row{questions_id}[$$params{question_number}]);
    my $general_question_row = $sth->fetchrow_hashref;
     
    my $result;
    if($$general_question_row{single_answer_question_id})
    {
        $sth = $$app{dbh}->prepare("
            SELECT * 
            FROM single_answer_questions WHERE id = ?        
        ");
        $sth->execute($$general_question_row{single_answer_question_id});
        my $question = $sth->fetchrow_hashref;  #TODO ASSERT  

        $sth = $$app{dbh}->prepare("
            SELECT text, id
            FROM single_answer_questions_answers WHERE question_id = ?
        ");
        $sth->execute($$question{id});
    
        my @answers; 
        while(my $row = $sth->fetchrow_hashref)
        {
            push @answers, $row;
            TRACE("Question Answer", Dumper $row)
        }    
    
        $result = {
            answers => \@answers,
            type => "single_answer",
            text => $$question{text},
            question_number => $$params{question_number}
        };
    }
    #TODO Other question types

    return $result;

}

sub submitAnswer($)
{
    my ($app) = @_;
    my $single_answer = $$app{cgi}{single_answer};
    my @multiple_answers;
    if(defined $$app{cgi}{multiple_answers})
    {
        @multiple_answers = split(",", $$app{cgi}{multiple_answers});
    }
    my $free_answer = $$app{cgi}{free_answer};

    my $sth = $$app{dbh}->prepare("
        SELECT * FROM test_sessions WHERE session_token = ?
    ");
    $sth->execute($$app{cgi}{test_session_token});

    my $test_session_row = $sth->fetchrow_hashref;
    
    my $sth = $$app{dbh}->prepare("
        INSERT INTO test_session_answers
        VALUES(default, ?, default, ?, null, ?, ?, ?)
    ");
    $sth->execute($$test_session_row{id}, $$test_session_row{questions_id}[$$app{cgi}{question_number}], $single_answer, \@multiple_answers, $free_answer);
    
    $$app{cgi}{question_number}++;
    return getQuestion($app);
}

1;
